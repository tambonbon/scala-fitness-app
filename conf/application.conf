# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
play.http.secret.key="59zN2gcqN7QfEgWscC2zn8A?IsLd7qJT2iq[Rb:8c5fXoLxPsccUHVSX[5tiJh4s"
## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  db.default.enabled = false # make this false when deploy with heroku
  autoApply = true
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#


## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
#db.default.driver=org.postgresql.Driver
#db.default.url=${?DATABASE_URL}

# For Docker deployment
#slick {
#  dbs {
#    default {
#      profile="slick.jdbc.PostgresProfile$"
#      db {
#        connectionPool = "HikariCP" //use HikariCP for our connection pool
#        profile = "org.postgresql.Driver"
#        dataSourceClass = "org.postgresql.ds.PGSimpleDataSource" //Simple datasource with no connection pooling. The connection pool has already been specified with HikariCP.
#        properties = {
#          serverName = "db"  // db if run in docker
#          portNumber = "5432"
#          databaseName = "fitness"
#          user = "postgres"
#          password = "postgres"
#        }
#      }
#      numThreads = 10
#      connectionTimeout = 6000 // In the hope that this resolves the connection errors.
#      leakDetectionThreshold=60000 // In the hope that this resolves the connection errors.
#    }
#  }
#}

#slick.dbs.default.profile="slick.jdbc.H2Profile$"
#slick.dbs.default.db.profile="org.h2.Driver"
#slick.dbs.default.db.url="jdbc:h2:mem:play;DB_CLOSE_DELAY=-1"

# For Heroku prod
slick {
    dbs {
        default {
            profile = "slick.jdbc.PostgresProfile$"
            db {
                connectionPool = "HikariCP"
                profile = "org.postgresql.Driver"
                dataSourceClass = "org.postgresql.ds.PGSimpleDataSource" #Simple datasource with no connection pooling. The connection pool has already been specified with HikariCP.
                properties = {
                    # url = "postgresql://postgres:postgres@localhost:5432/"
                    url = "ec2-79-125-30-28.eu-west-1.compute.amazonaws.com"
                    serverName = "db"  # db if run in docker
                    portNumber = "5432"
                    databaseName = "d9h510uribha5c"
                    user = "qptmivcadvtoed"
                    password = "f719177be85223a4d5500e87c3da04ea6be3cece8268f3e8beafdd752522d17c"
                }
            }
            numThreads = 10
            #connectionTimeout = 6000 // In the hope that this resolves the connection errors.
            #leakDetectionThreshold=60000 // In the hope that this resolves the connection errors.
        }
    }
}

play.filters.hosts {
  allowed = ["."]
}

# hosts{
#     allowed = ["scala-fitness-app.herokuapp.com", "localhost:9000", "127.0.0.1"]
# }
#play.filters.disabled+=play.filters.csrf.CSRFFilter # is it for Heroku?
#slick.dbs.default.profile =
#slick.dbs.default.db.dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
#slick.dbs.default.db.properties.driver = "org.postgresql.Driver"
